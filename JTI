# coding:utf-8
import platform
import winreg


class ToolProtocolInfo:
    def __init__(self):
        if platform.architecture()[0] == '32bit':
            self.REG_PATH = r"Software\\PassThruSupport.04.04\\"
        else:
            self.REG_PATH = r"Software\\Wow6432Node\\PassThruSupport.04.04\\"

        # This protocol search list is only for j2534-1
        self.Protocols = ['CAN', 'ISO14230', 'ISO15765', 'ISO9141', 'J1850PWM', 'J1850VPW', 'SCI_A_ENGINE',
                          'SCI_A_TRANS', 'SCI_B_ENGINE', 'SCI_B_TRANS', 'MSCAN', 'MSISO15765', 'SW_CAN_PS']

        self.toolINFO = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]

        self.BaseKey = winreg.OpenKeyEx(winreg.HKEY_LOCAL_MACHINE, self.REG_PATH)
        self.count = winreg.QueryInfoKey(self.BaseKey)[0]
        self.J2534_Device_Reg_Info = []

        for i in range(self.count):
            DeviceKey = winreg.OpenKeyEx(self.BaseKey, winreg.EnumKey(self.BaseKey, i))
            Name = winreg.QueryValueEx(DeviceKey, "Name")[0]
            FunctionLibrary = winreg.QueryValueEx(DeviceKey, "FunctionLibrary")[0]
            Vendor = winreg.QueryValueEx(DeviceKey, "Vendor")[0]
            self.toolINFO[i].append([i, Vendor, Name, FunctionLibrary])

            for item in self.Protocols:
                if self.Search_Registry(item, DeviceKey):
                    self.toolINFO[i].append(item)

            self.J2534_Device_Reg_Info.append(self.toolINFO[i])

    @staticmethod
    def Search_Registry(name, key):
        try:
            value, regtype = winreg.QueryValueEx(key, name)
            return value
        except WindowsError:
            return None

    def Protocol_List(self):
        for n in self.J2534_Device_Reg_Info:
            print(n)

    def Dll_Path(self, index_of_tool):
        try:
            return self.J2534_Device_Reg_Info[index_of_tool][0][3]
        except IndexError:
            return "Selected Tool Index Error.."

    def Vendor(self, index_of_tool):
        try:
            return self.J2534_Device_Reg_Info[index_of_tool][0][1]
        except IndexError:
            return "Selected Tool Index Error.."

    def Name(self, index_of_tool):
        try:
            return self.J2534_Device_Reg_Info[index_of_tool][0][2]
        except IndexError:
            return "Selected Tool Index Error.."

    def Supported_Protocols(self, index_of_tool):
        try:
            return self.J2534_Device_Reg_Info[index_of_tool][1:]
        except IndexError:
            return "Selected Tool Index Error.."



if __name__ == '__main__':
    JPI = ToolProtocolInfo()
    JPI.Protocol_List()
    print(JPI.Dll_Path(5))
    print(JPI.Vendor(5))
    print(JPI.Name(5))
    print(JPI.Supported_Protocols(5))
